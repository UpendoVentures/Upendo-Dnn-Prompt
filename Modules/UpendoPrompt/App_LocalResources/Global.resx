<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ApplyRoles.Text" xml:space="preserve">
    <value>Helps you quickly apply "Edit" and "View" permissions to all pages in a specific portal for a given role. You can use the --portalId and --roleName parameters to define the portal and role, ensuring consistent role assignments across all pages. If any parameters are missing, defaults will be applied based on the portal configuration.</value>
  </data>
  <data name="CaptchaModeToggled.Text" xml:space="preserve">
    <value>CAPTCHA has been toggled {0} on this website. </value>
  </data>
  <data name="CompressLogFiles.Text" xml:space="preserve">
    <value>This command compresses and archives log files from the previous month in the /Portals/_default/Logs/ directory. The logs are saved in a zip file named Logs-YYYYmm.zip, where YYYY is the year and mm is the month. It only includes logs from the current and previous month. It also includes complementary logs, like installation and failure logs, and deletes the failure logs after archiving them.

Additionally, the command supports the -scheduler option to manage the scheduled job execution:

enable: Checks if the scheduled job exists. If not, it creates and enables it.
disable: Disables the scheduled job if it exists. If it doesnâ€™t exist, it creates it but keeps it disabled.</value>
  </data>
  <data name="CompressLogFilesRunnerFailure.Text" xml:space="preserve">
    <value>Compress Log Files Runner Failure</value>
  </data>
  <data name="CreateUserExists.Text" xml:space="preserve">
    <value>User already exists, not created: {0} ({1}).</value>
  </data>
  <data name="CreateUserFailure.Text" xml:space="preserve">
    <value>Error creating user: {0} ({1}).</value>
  </data>
  <data name="CreateUserSuccess.Text" xml:space="preserve">
    <value>Successfully created user: {0} ({1}) (Password: {2}).</value>
  </data>
  <data name="DebugDisabled.Text" xml:space="preserve">
    <value>Debugging is disabled throughout the site. </value>
  </data>
  <data name="DebugEnabled.Text" xml:space="preserve">
    <value>Debugging is enabled in one or more of the debugging areas. You should consider turning it off if this is not expected. </value>
  </data>
  <data name="DebugOff.Text" xml:space="preserve">
    <value>Debugging has been turned off in all areas of the site.</value>
  </data>
  <data name="DebugOn.Text" xml:space="preserve">
    <value>Debugging has been enabled throughout the site. All visitors will experience slow page loads for the next few moments. </value>
  </data>
  <data name="DebugStatusHost.Text" xml:space="preserve">
    <value>Debugging in the Host Settings is {0}.</value>
  </data>
  <data name="DebugStatusLog4net.Text" xml:space="preserve">
    <value>Debugging in the Log4Net logging is {0}.</value>
  </data>
  <data name="DebugStatusWebConfig.Text" xml:space="preserve">
    <value>Debugging in the web.config is {0}.</value>
  </data>
  <data name="DeleteDemoUsers.Text" xml:space="preserve">
    <value>Allows you to delete the user accounts created using the `set-demousers` command, in bulk.</value>
  </data>
  <data name="DeleteTestUsers.Text" xml:space="preserve">
    <value>Allows you to delete the user accounts created using the `set-testusers` command, in bulk.</value>
  </data>
  <data name="DeleteUserNotNeeded.Text" xml:space="preserve">
    <value>User account does not exist, not deleted:  {0} {1} ({2}).</value>
  </data>
  <data name="DeleteUserSuccess.Text" xml:space="preserve">
    <value>Successfully deleted user account:  {0} {1} ({2}).</value>
  </data>
  <data name="DemoUserAccountsAdded.Text" xml:space="preserve">
    <value>Successfully added demo user accounts... We saved some time together. Yay!  :)</value>
  </data>
  <data name="DemoUsers.Text" xml:space="preserve">
    <value>Helps when developing or building out demos, by automatically adding a bunch of fun user accounts to play with.</value>
  </data>
  <data name="DemoUsersDeleted.Text" xml:space="preserve">
    <value>Successfully deleted demo user accounts... We saved some time together. Yay!  :)</value>
  </data>
  <data name="Deprecated.Text" xml:space="preserve">
    <value>This command has been deprecated. Please use '{0}' instead. This command will be removed in a future release.</value>
  </data>
  <data name="Disabled.Text" xml:space="preserve">
    <value>disabled</value>
  </data>
  <data name="Enabled.Text" xml:space="preserve">
    <value>enabled</value>
  </data>
  <data name="ErrorOccurred.Text" xml:space="preserve">
    <value>An error occurred. Please check the log files to find and resolve the issue.</value>
  </data>
  <data name="FileSizeMessage.Text" xml:space="preserve">
    <value>The files/folder queried has approximately {0} MB of files.</value>
  </data>
  <data name="HowManyFlagsInvalid.Text" xml:space="preserve">
    <value>Invalid</value>
  </data>
  <data name="HowManyNegative.Text" xml:space="preserve">
    <value>--howmany must be a positive integer.</value>
  </data>
  <data name="Impersonate.Text" xml:space="preserve">
    <value>Allows you as a superuser to impersonate another user account by either Username or UserID.</value>
  </data>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>&lt;p&gt;No information at this time.&lt;/p&gt;</value>
  </data>
  <data name="PackageAuthentication.Text" xml:space="preserve">
    <value>Authentication System</value>
  </data>
  <data name="PackageContainer.Text" xml:space="preserve">
    <value>Container</value>
  </data>
  <data name="PackageDeletionErrorFormat.Text" xml:space="preserve">
    <value>Error Deleting: {0}</value>
  </data>
  <data name="PackageDeletionSuccess.Text" xml:space="preserve">
    <value>Successfully deleted {0} of {1} files in the `/App_Data/ExtensionPackages/` folder.</value>
  </data>
  <data name="PackageFoundMessage.Text" xml:space="preserve">
    <value>{0} has one or more available packages to review: {1}</value>
  </data>
  <data name="PackageJsLibrary.Text" xml:space="preserve">
    <value>JavaScript Library</value>
  </data>
  <data name="PackageLanguage.Text" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="PackageLibrary.Text" xml:space="preserve">
    <value>Library</value>
  </data>
  <data name="PackageModule.Text" xml:space="preserve">
    <value>Module</value>
  </data>
  <data name="PackageProvider.Text" xml:space="preserve">
    <value>Provider</value>
  </data>
  <data name="PackageSkin.Text" xml:space="preserve">
    <value>Theme</value>
  </data>
  <data name="PopupDisabled.Text" xml:space="preserve">
    <value>Popups have been disabled for {0}.</value>
  </data>
  <data name="PopupEnabled.Text" xml:space="preserve">
    <value>Popups have been enabled for {0}.</value>
  </data>
  <data name="PromptCaptchaMode.Text" xml:space="preserve">
    <value>Allows you to toggle the CAPTCHA setting on and off on the login.  </value>
  </data>
  <data name="PromptDebugInfo.Text" xml:space="preserve">
    <value>Displays the debug details for the primary 3 debugging locations. </value>
  </data>
  <data name="PromptDebugMode.Text" xml:space="preserve">
    <value>Allows you to turn on debugging in your site. This method enables debugging in the web.config, site settings, and the Log4Net configuration file.</value>
  </data>
  <data name="PromptDeletePackages.Text" xml:space="preserve">
    <value>This prompt command will allow you to delete all of the saved packages in the `/App_Code/ExtensionPackages/` folder. This should only be done with websites that do not have any plans of using the website import/export features.</value>
  </data>
  <data name="PromptDeleteTempFolder.Text" xml:space="preserve">
    <value>Running this command will delete the `/Install/Temp/` folder in your DNN website. This can help diagnose/prevent extension installation issues in some cases.</value>
  </data>
  <data name="PromptListAvailablePackages.Text" xml:space="preserve">
    <value>When you use this command, you will be shown a listing of all of the available packages that could be installed directly from the website itself. </value>
  </data>
  <data name="PromptListPackages.Text" xml:space="preserve">
    <value>This command allows you to list and see the extension packages that have been saved in the `/App_Data/ExtensionPackages/` folder.</value>
  </data>
  <data name="PromptPopupMode.Text" xml:space="preserve">
    <value>Allows you to enable/disable the popup editing feature on the current website or all sites in this installation. </value>
  </data>
  <data name="PromptThemeseUsed.Text" xml:space="preserve">
    <value>This command allows you to see all of the themes that currently are used by one or more pages, modules, and other settings.</value>
  </data>
  <data name="Prompt_AddRoleFailure.Text" xml:space="preserve">
    <value>There was an error adding the role: {0} in Portal {1}.</value>
  </data>
  <data name="Prompt_AddRolePortalIdNegative.Text" xml:space="preserve">
    <value>The portal ID cannot be negative. Please provide a valid portal ID.</value>
  </data>
  <data name="Prompt_AddRolePortalNotFound" xml:space="preserve">
    <value>The portal {0} could not be found. Please make sure the portal ID is correct.</value>
  </data>
  <data name="Prompt_AddRoleSuccess.Text" xml:space="preserve">
    <value>Successfully role: {0} added to all tabs in Portal {1}.</value>
  </data>
  <data name="Prompt_ApplyRoles_ResultHtml.Text" xml:space="preserve">
    <value>&lt;div&gt;
    &lt;p&gt;This command is used to assign "Edit" and "View" permissions to all pages in a specified portal for a given role. It's useful for ensuring consistent permissions across all pages of the portal.&lt;/p&gt;
    &lt;h4&gt;Help_Options&lt;/h4&gt;
    &lt;div&gt;
        &lt;table class="table"&gt;
            &lt;thead&gt;
                &lt;tr&gt;
                    &lt;th&gt;Flag&lt;/th&gt;
                    &lt;th&gt;Type&lt;/th&gt;
                    &lt;th&gt;Required&lt;/th&gt;
                    &lt;th&gt;Default&lt;/th&gt;
                    &lt;th&gt;Description&lt;/th&gt;
                &lt;/tr&gt;
            &lt;/thead&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="mono"&gt;--portalId&lt;/td&gt;
                    &lt;td&gt;Integer&lt;/td&gt;
                    &lt;td&gt;Yes&lt;/td&gt;
                    &lt;td&gt;0&lt;/td&gt;
                    &lt;td&gt;The --portalId flag specifies the portal ID where the roles will be applied.&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td class="mono"&gt;--roleName&lt;/td&gt;
                    &lt;td&gt;String&lt;/td&gt;
                    &lt;td&gt;Yes&lt;/td&gt;
                    &lt;td&gt;Site Admin&lt;/td&gt;
                    &lt;td&gt;The --roleName flag specifies the name of the role to which permissions will be applied.&lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
    &lt;h4&gt;Using apply-roles&lt;/h4&gt;
    &lt;code class="block"&gt;apply-roles --portalId 1 --roleName "Site Admin"&lt;/code&gt;
    &lt;h4&gt;Output&lt;/h4&gt;
    &lt;p&gt;If successful, you will see a confirmation message for each page, indicating that the permissions were applied correctly.&lt;/p&gt;
    &lt;p&gt;Role Applied:&lt;/p&gt;
    &lt;code class="block"&gt;Successfully applied "Site Admin" role  to all pages in portal 1.&lt;/code&gt;
    &lt;p&gt;Error Applying Role:&lt;/p&gt;
    &lt;code class="block"&gt;Error applying role "Site Admin" in portal 1. &lt;/code&gt;
&lt;/div&gt;</value>
  </data>
  <data name="Prompt_CaptchaMode_ResultHtml.Text" xml:space="preserve">
    <value>&lt;div&gt;
    &lt;p&gt;This command makes it super-simple to toggle the login CAPTCHA setting on and off.&lt;/p&gt;
    &lt;p&gt;&lt;strong&gt;WARNING!&lt;/strong&gt; When used, this command will clear the data cache on your website. Though, most people will likely not notice, some page loads may be a bit slower for the next few moments.&lt;/p&gt;
    &lt;h4&gt;Using set-captcha&lt;/h4&gt;
    &lt;code class="block"&gt;set-captcha&lt;/code&gt;
    &lt;p&gt;This command does not have any options.&lt;/p&gt;
    &lt;p&gt;When you run this command, CAPTCHA mode is toggled in the Site Settings. If the setting doesn't already exist, it creates it.&lt;/p&gt;
&lt;/div&gt;</value>
  </data>
  <data name="Prompt_CompressLogFilesRunnerSuccess.Text" xml:space="preserve">
    <value>Log compression job executed successfully.</value>
  </data>
  <data name="Prompt_CompressLogFiles_ResultHtml.Text" xml:space="preserve">
    <value>&lt;div&gt;
    &lt;h4&gt;Help_Options&lt;/h4&gt;
    &lt;div&gt;
        &lt;table class="table"&gt;
            &lt;thead&gt;
                &lt;tr&gt;
                    &lt;th&gt;Flag&lt;/th&gt;
                    &lt;th&gt;Type&lt;/th&gt;
                    &lt;th&gt;Required&lt;/th&gt;
                    &lt;th&gt;Default&lt;/th&gt;
                    &lt;th&gt;Description&lt;/th&gt;
                &lt;/tr&gt;
            &lt;/thead&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="mono"&gt;--scheduler&lt;/td&gt;
                    &lt;td&gt;String&lt;/td&gt;
                    &lt;td&gt;No&lt;/td&gt;
                    &lt;td&gt;None&lt;/td&gt;
                    &lt;td&gt;
                        Manages the scheduled job execution. Accepts the following values:
                        &lt;ul&gt;
                            &lt;li&gt;&lt;strong&gt;enable&lt;/strong&gt; - Checks if the scheduled job exists. If not, it creates and enables it.&lt;/li&gt;
                            &lt;li&gt;&lt;strong&gt;disable&lt;/strong&gt; - Disables the scheduled job if it exists. If it doesnâ€™t exist, it creates it but keeps it disabled.&lt;/li&gt;
                        &lt;/ul&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
    &lt;h4&gt;Using compress-log-files&lt;/h4&gt;
    &lt;code class="block"&gt;compress-log-files&lt;/code&gt;
    &lt;code class="block"&gt;compress-log-files --scheduler enable&lt;/code&gt;
    &lt;code class="block"&gt;compress-log-files --scheduler disable&lt;/code&gt;

    &lt;h4&gt;Output&lt;/h4&gt;
    &lt;p&gt;If successful, you will see a confirmation message indicating that the logs have been compressed and archived.&lt;/p&gt;
    &lt;p&gt;Compression Successful:&lt;/p&gt;
    &lt;code class="block"&gt;Logs for the previous month have been compressed and saved in Logs-YYYYmm.zip.&lt;/code&gt;
    &lt;p&gt;Scheduler Enabled:&lt;/p&gt;
    &lt;code class="block"&gt;Scheduled job successfully enabled.&lt;/code&gt;
    &lt;p&gt;Scheduler Disabled:&lt;/p&gt;
    &lt;code class="block"&gt;Scheduled job successfully disabled.&lt;/code&gt;
&lt;/div&gt;</value>
  </data>
  <data name="Prompt_DebugInfo_ResultHtml.Text" xml:space="preserve">
    <value>&lt;div&gt;
    &lt;p&gt;Helps you see and know where debugging might already be turned on. This is helpful when you're not sure or
        have multiple people working on a site.&lt;/p&gt;
    &lt;h4&gt;Toggle whether the site is in debug mode, or running normally&lt;/h4&gt;
    &lt;code class="block"&gt;list-debug&lt;/code&gt;
    &lt;p&gt;This command does not have any options.&lt;/p&gt;
    &lt;p&gt;If you find that one or more areas have debug turned on, you should use the command below to disable debug
        mode. You may need to run it twice.&lt;/p&gt;
    &lt;code class="block"&gt;set-debug&lt;/code&gt;
&lt;/div&gt;</value>
  </data>
  <data name="Prompt_DebugMode_ResultHtml.Text" xml:space="preserve">
    <value>&lt;div&gt;
    &lt;p&gt;When you need more information to help diagnose and resolve an error, this command can help you get more
        verbose and detailed information.&lt;/p&gt;
    &lt;p&gt;&lt;strong&gt;WARNING!&lt;/strong&gt; When used, this command will RESTART your website. Page loads for the next few
        moments after running this command will be slower.&lt;/p&gt;
    &lt;h4&gt;Using set-debug&lt;/h4&gt;
    &lt;code class="block"&gt;set-debug&lt;/code&gt;
    &lt;p&gt;This command does not have any options.&lt;/p&gt;
    &lt;p&gt;When you run this command, debug mode is toggled in the superuser settings, web.config, and the
        DotNetNuke.log4net.config files.&lt;/p&gt;
    &lt;p&gt;If you're unsure if you need to run this command, first try running the command below.&lt;/p&gt;
    &lt;code class="block"&gt;list-debug&lt;/code&gt;
&lt;/div&gt;</value>
  </data>
  <data name="Prompt_DeleteDemoUsers_ResultHtml.Text" xml:space="preserve">
    <value>&lt;div&gt;
        &lt;p&gt;This is a companion command for the `set-demousers` command. This version of the command will permanently delete the users accounts created by that command.&lt;/p&gt;
        &lt;h4&gt;Using delete-demousers&lt;/h4&gt;
        &lt;code class="block"&gt;delete-demousers&lt;/code&gt;
        &lt;p&gt;This command does not have any flags&lt;/p&gt;
        &lt;code class="block"&gt;delete-demousers&lt;/code&gt;
        &lt;h4&gt;Output&lt;/h4&gt;
        &lt;p&gt;If successful, you should see a message for each demo user deleted, stating the result of the deletion of the account.&lt;/p&gt;
        &lt;p&gt;User Deleted:&lt;/p&gt;
        &lt;code class="block"&gt;Successfully deleted user account: Jane Doe ({jdoe@example.com}).&lt;/code&gt;
        &lt;p&gt;User Doesn't Exist:&lt;/p&gt;
        &lt;code class="block"&gt;User account does not exist, not deleted: Jane Doe ({jdoe@example.com}).&lt;/code&gt;
    &lt;/div&gt;</value>
  </data>
  <data name="Prompt_DeletePackages_ResultHtml.Text" xml:space="preserve">
    <value>&lt;div&gt;
    &lt;p&gt;Newer versions of DNN saves any installed extension into the `/App_Data/ExtensionPackages/` folder. This
        command allows you to delete those files to save disk space.&lt;/p&gt;
    &lt;h4&gt;Using delete-packages&lt;/h4&gt;
    &lt;code class="block"&gt;delete-packages&lt;/code&gt;
    &lt;p&gt;This command does not have any flags&lt;/p&gt;
    &lt;code class="block"&gt;delete-packages&lt;/code&gt;
    &lt;h4&gt;Output&lt;/h4&gt;
    &lt;p&gt;If completely successful, you will see a single message similar to that seen below (the numbers will be
        different for everyone).&lt;/p&gt;
    &lt;code class="block"&gt;Successfully deleted 41 of 41 files in the `/App_Data/ExtensionPackages/` folder.&lt;/code&gt;
    &lt;p&gt;If one or more errors are found, a listing of each errored file will be shown, including the messages below.
    &lt;/p&gt;
    &lt;code class="block"&gt;Error Deleting;  (file name here)&lt;/code&gt;
    &lt;code class="block"&gt;Successfully deleted 38 of 41 files in the `/App_Data/ExtensionPackages/` folder.&lt;/code&gt;
    &lt;p&gt;The example above assumes that 3 files were unable to be deleted. When this happens, sometimes the file is
        locked and the command can simply be run again.&lt;/p&gt;
&lt;/div&gt;</value>
  </data>
  <data name="Prompt_DeleteTempFolder_ResultHtml.Text" xml:space="preserve">
    <value>&lt;div&gt;
    &lt;p&gt;Everytime you install/upgrade an extension in DNN, a temporary folder is created in the `/Install/Temp/`
        directory in your website. This command allows you to quickly delete that folder and everything to help you
        keep your DNN instance clean.&lt;/p&gt;
    &lt;h4&gt;Using delete-tempfolder&lt;/h4&gt;
    &lt;code class="block"&gt;delete-tempfolder&lt;/code&gt;
    &lt;p&gt;This command does not have any flags&lt;/p&gt;
    &lt;code class="block"&gt;delete-tempfolder&lt;/code&gt;
    &lt;h4&gt;Output&lt;/h4&gt;
    &lt;p&gt;If completely successful, you will see a single message similar to that seen below.&lt;/p&gt;
    &lt;code class="block"&gt;The files and folders in the installation temporary folder have been deleted.&lt;/code&gt;
    &lt;p&gt;If one or more errors are found, a listing of each errored file will be shown, including the messages below.
    &lt;/p&gt;
&lt;/div&gt;</value>
  </data>
  <data name="Prompt_DeleteTestUsers_ResultHtml.Text" xml:space="preserve">
    <value>&lt;div&gt;
        &lt;p&gt;This is a companion command for the `set-testusers` command. This version of the command will permanently delete the users accounts created by that command.&lt;/p&gt;
        &lt;h4&gt;Using delete-testusers&lt;/h4&gt;
        &lt;code class="block"&gt;delete-testusers&lt;/code&gt;
        &lt;p&gt;This command does not have any flags&lt;/p&gt;
        &lt;code class="block"&gt;delete-testusers&lt;/code&gt;
        &lt;h4&gt;Output&lt;/h4&gt;
        &lt;p&gt;If successful, you should see a message for each test user deleted, stating the result of the deletion of the account.&lt;/p&gt;
        &lt;p&gt;User Deleted:&lt;/p&gt;
        &lt;code class="block"&gt;Successfully deleted user account: testuser-1 ({testuser-1@example.com}).&lt;/code&gt;
        &lt;p&gt;User Doesn't Exist:&lt;/p&gt;
        &lt;code class="block"&gt;User account does not exist, not deleted: testuser-1 ({testuser-1@example.com}).&lt;/code&gt;
    &lt;/div&gt;</value>
  </data>
  <data name="Prompt_DemoUsers_ResultHtml.Text" xml:space="preserve">
    <value>&lt;div&gt;
        &lt;p&gt;When working on building a website or extension, you often need some demo users to use for your work. This command adds a handful of test user accounts for you.&lt;/p&gt;
        &lt;h4&gt;Using set-demousers&lt;/h4&gt;
        &lt;code class="block"&gt;set-demousers&lt;/code&gt;
        &lt;p&gt;This command does not have any flags&lt;/p&gt;
        &lt;code class="block"&gt;set-demousers&lt;/code&gt;
        &lt;h4&gt;Output&lt;/h4&gt;
        &lt;p&gt;If successful, you should see a message for each demo user, stating the result of the creation of the account.&lt;/p&gt;
        &lt;p&gt;User Created:&lt;/p&gt;
        &lt;code class="block"&gt;Successfully created user: Jane Doe ({jdoe@example.com}).&lt;/code&gt;
        &lt;p&gt;User Exists:&lt;/p&gt;
        &lt;code class="block"&gt;User already exists, not created: Jane Doe ({jdoe@example.com}).&lt;/code&gt;
        &lt;p&gt;Error Creating User:&lt;/p&gt;
        &lt;code class="block"&gt;Error creating user: Jane Doe ({jdoe@example.com}).&lt;/code&gt;
        &lt;p&gt;(&lt;em&gt;if this happens, check the Admin Log to see why, or run `set-debug` and then check the Log4NET log file for more details.&lt;/em&gt;)&lt;/p&gt;
    &lt;/div&gt;</value>
  </data>
  <data name="Prompt_ImpersonateFlagsInvalid.Text" xml:space="preserve">
    <value>You must either specify a valid UserID -OR- Username value to impersonate another user account. Both were empty. Please only specify one.</value>
  </data>
  <data name="Prompt_ImpersonateNotAuthorized.Text" xml:space="preserve">
    <value>This user account is not authorized to perform this action. </value>
  </data>
  <data name="Prompt_ImpersonateNoUserFound.Text" xml:space="preserve">
    <value>No user account was found matching your query. Please check the UserID or Username you entered for accuracy and try again. </value>
  </data>
  <data name="Prompt_ImpersonateSuccess.Text" xml:space="preserve">
    <value>Impersonation was successful. Please refresh the page. </value>
  </data>
  <data name="Prompt_Impersonate_FlagPortalID.Text" xml:space="preserve">
    <value>The `portalid` flag allows you to target a single website by entering the correct PortalID value (Site ID number).  This flag should be used by itself.</value>
  </data>
  <data name="Prompt_Impersonate_FlagUserID.Text" xml:space="preserve">
    <value>The `userid` flag allows you to target a user account by entering a valid UserID.  This flag should be used by itself. </value>
  </data>
  <data name="Prompt_Impersonate_FlagUsername.Text" xml:space="preserve">
    <value>The `username` flag allows you to specify a user account to impersonate by entering their username. This flag should be used by itself. </value>
  </data>
  <data name="Prompt_Impersonate_ResultHtml.Text" xml:space="preserve">
    <value>&lt;div&gt;
    &lt;p&gt;Impersonation is a userful tool to use to help diagnose and troubleshoot issues on a website. This command
        allows you to do this. After running this command, you will be redirected to the website homepage, but
        logged in as the user account you specified. This may or may not work with non-DNN authentication providers.
    &lt;/p&gt;
    &lt;h4&gt;Using impersonate&lt;/h4&gt;
    &lt;code class="block"&gt;impersonate&lt;/code&gt;
    &lt;p&gt;This command has two flags that you need to be aware of. The `username` must be a string value that exactly
        matches a valid username on the same site (portal). The `userid` must also be a valid UserID, on the same
        site (portal).&lt;/p&gt;
    &lt;p&gt;Example using the `username` flag:&lt;/p&gt;
    &lt;code class="block"&gt;impersonate --username supersecretusername&lt;/code&gt;
    &lt;p&gt;Example using the `userid` flag:&lt;/p&gt;
    &lt;code class="block"&gt;impersonate --userid 1234&lt;/code&gt;
    &lt;h4&gt;Output&lt;/h4&gt;
    &lt;p&gt;If successful, you will see the message below and a log entry will be added to the event log (a.k.a.,
        Admin Logs).&lt;/p&gt;
    &lt;code class="block"&gt;Impersonation was successful. Please refresh the page.&lt;/code&gt;
&lt;/div&gt;</value>
  </data>
  <data name="Prompt_ListAvailablePackages_ResultHtml.Text" xml:space="preserve">
    <value>&lt;div&gt;
    &lt;p&gt;Some DNN websites may have extension packages sitting in the `/Install/` folders, waiting to be installed.
        This can greatly impact any DNN upgrade, if you're not aware of the packages. This command allows you to see
        if this is the case on your instance, and where they are.&lt;/p&gt;
    &lt;p&gt;This routine ignores any packages that won't automatically install. For example, it looks for installation
        packages ending with .zip and not .resources.&lt;/p&gt;
    &lt;h4&gt;Using list-availablepackages&lt;/h4&gt;
    &lt;code class="block"&gt;list-availablepackages&lt;/code&gt;
    &lt;p&gt;This command does not have any flags&lt;/p&gt;
    &lt;code class="block"&gt;list-availablepackages&lt;/code&gt;
    &lt;h4&gt;Output&lt;/h4&gt;
    &lt;p&gt;If successful, you will see an alphabetized listing of the available packages found in that folder, along
        with a message stating that there were records found or not.&lt;/p&gt;
    &lt;p&gt;Records Found:&lt;/p&gt;
    &lt;table class="command-result-tbl"&gt;
        &lt;tr&gt;&lt;td&gt;Library has one or more available packages to review: C:\Work\Platform\platform9102\Website\Install\Library  &lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;Module has one or more available packages to review: C:\Work\Platform\platform9102\Website\Install\Module  &lt;/td&gt;&lt;/tr&gt;
    &lt;/table&gt;
    &lt;code class="block"&gt;
        Maches were found for your query.
    &lt;/code&gt;
    &lt;p&gt;No Records Found:&lt;/p&gt;
    &lt;code class="block"&gt;No matches were found for your query.&lt;/code&gt;
&lt;/div&gt;</value>
  </data>
  <data name="Prompt_ListPackages_ResultHtml.Text" xml:space="preserve">
    <value>&lt;div&gt;
    &lt;p&gt;Newer versions of DNN saves any installed extension into the `/App_Data/ExtensionPackages/` folder. This is
        meant to be used with the site import/export feature. Using this command will allow you to view the files in
        that folder in alphabetical order.&lt;/p&gt;
    &lt;h4&gt;Using list-packages&lt;/h4&gt;
    &lt;code class="block"&gt;list-packages&lt;/code&gt;
    &lt;p&gt;This command does not have any flags&lt;/p&gt;
    &lt;code class="block"&gt;list-packages&lt;/code&gt;
    &lt;h4&gt;Output&lt;/h4&gt;
    &lt;p&gt;If successful, you will see an alphabetized listing of the packages found in that folder, along with a
        message stating that there were records found or not.&lt;/p&gt;
    &lt;p&gt;Records Found:&lt;/p&gt;
    &lt;code class="block"&gt;Maches were found for your query.&lt;/code&gt;
    &lt;p&gt;No Records Found:&lt;/p&gt;
    &lt;code class="block"&gt;No matches were found for your query.&lt;/code&gt;
&lt;/div&gt;</value>
  </data>
  <data name="Prompt_ModeInvalid.Text" xml:space="preserve">
    <value>The mode can only be 'enable' or 'disable'. The default is 'disable'.</value>
  </data>
  <data name="Prompt_PasswordResetNoPortalFound.Text" xml:space="preserve">
    <value>No website was found matching your query. Please check the PortalID entered for accuracy and try again.</value>
  </data>
  <data name="Prompt_PasswordResetNoRoleFound.Text" xml:space="preserve">
    <value>No security role was found matching your query. Please check the RoleID entered for accuracy and try again.</value>
  </data>
  <data name="Prompt_PasswordResetNoUserFound.Text" xml:space="preserve">
    <value>No user account was found matching your query. Please check the UserID entered for accuracy and try again.</value>
  </data>
  <data name="Prompt_PasswordsResetted.Text" xml:space="preserve">
    <value>{0} has chosen to require changed password(s) for: Scope ({1}), UserID ({2}), RoleID ({3}), PortalID ({4}).</value>
  </data>
  <data name="Prompt_PopupMode_FlagScope.Text" xml:space="preserve">
    <value>Specify whether you want to apply this action to only the current site, or all sites. The accepted values include 'current' and 'all'.</value>
  </data>
  <data name="Prompt_PopupMode_ResultHtml.Text" xml:space="preserve">
    <value>&lt;div&gt;
    &lt;h4&gt;Enable or disable popups on the current or all sites&lt;/h4&gt;
    &lt;code class="block"&gt;set-popups [--mode &amp;lt;enable|disable&amp;gt;] [--scope &amp;lt;current|all&amp;gt;]&lt;/code&gt;
    &lt;p&gt;Popups have been [enabled/disabled] for [this site/all sites].&lt;/p&gt;
    &lt;p&gt;Note: If you don't enter any command arguments, you'll simply disable popups on the current website only.&lt;/p&gt;
&lt;/div&gt;</value>
  </data>
  <data name="Prompt_ResetPasswordNotAuthorized.Text" xml:space="preserve">
    <value>This user account is not authorized to perform this action.</value>
  </data>
  <data name="Prompt_ResetPassword_ResultHtml.Text" xml:space="preserve">
    <value>&lt;div&gt;
        &lt;h4&gt;Resets the Password for One or Many User Accounts&lt;/h4&gt;
        &lt;code class="block"&gt;password-reset [--scope &amp;lt;current|all&amp;gt;] [--userid &amp;lt;integer&amp;gt;] [--roleid &amp;lt;integer&amp;gt;] [--portalid &amp;lt;integer&amp;gt;]&lt;/code&gt;
        &lt;p&gt;Your request to reset the password for the specified user accounts was successful. Each user account will be prompted to change their password the next time they log in. &lt;/p&gt;
&lt;/div&gt;</value>
  </data>
  <data name="Prompt_SchedulerDisabled.Text" xml:space="preserve">
    <value>Scheduler disabled successfully.</value>
  </data>
  <data name="Prompt_SchedulerEnabled.Text" xml:space="preserve">
    <value>Scheduler enabled successfully.</value>
  </data>
  <data name="Prompt_SchedulerNotFound.Text" xml:space="preserve">
    <value>Scheduler not found.</value>
  </data>
  <data name="Prompt_ScopeInvalid.Text" xml:space="preserve">
    <value>The scope can only be 'all' or 'current'. Omitting it will default to 'current'.</value>
  </data>
  <data name="Prompt_TestUsers_ResultHtml.Text" xml:space="preserve">
    <value>&lt;div&gt;
        &lt;p&gt;When working on building a website or extension, you often need some test users to use for your work. This command adds a handful of test user accounts for you.&lt;/p&gt;
        &lt;h4&gt;Help_Options&lt;/h4&gt;
        &lt;div&gt;&lt;table class="table"&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Flag&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="mono"&gt;--howmany&lt;/td&gt;&lt;td&gt;Integer&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;The --howmany flag is to define how many users you want to create, otherwise 100 will be created by default.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
        &lt;h4&gt;Using set-testusers&lt;/h4&gt;
        &lt;code class="block"&gt;set-testusers&lt;/code&gt;
        &lt;h4&gt;Output&lt;/h4&gt;
        &lt;p&gt;If successful, you should see a message for each test user, stating the result of the creation of the account.&lt;/p&gt;
        &lt;p&gt;User Created:&lt;/p&gt;
        &lt;code class="block"&gt;Successfully created user: testuser-1 ({testuser-1@example.com}).&lt;/code&gt;
        &lt;p&gt;User Exists:&lt;/p&gt;
        &lt;code class="block"&gt;User already exists, not created: testuser-1 ({testuser-1@example.com}).&lt;/code&gt;
        &lt;p&gt;Error Creating User:&lt;/p&gt;
        &lt;code class="block"&gt;Error creating user: testuser-1 ({testuser-1@example.com}).&lt;/code&gt;
        &lt;p&gt;(&lt;em&gt;if this happens, check the Admin Log to see why, or run `set-debug` and then check the Log4NET log file for more details.&lt;/em&gt;)&lt;/p&gt;
    &lt;/div&gt;</value>
  </data>
  <data name="Prompt_ThemesUsed_ResultHtml.Text" xml:space="preserve">
    <value>&lt;div&gt;
    &lt;p&gt;Ideally, this list should be as short as possible on most websites.&lt;/p&gt;
    &lt;p&gt;View all of the theme settings used on the entire DNN instance&lt;/p&gt;
    &lt;h4&gt;Using list-themes&lt;/h4&gt;
    &lt;code class="block"&gt;list-themes&lt;/code&gt;
    &lt;p&gt;A listing of all of the themes that have been specified in the superuser settings, site settings, pages, and
        modules will be listed.&lt;/p&gt;
&lt;/div&gt;</value>
  </data>
  <data name="Prompt_UserImpersonated.Text" xml:space="preserve">
    <value>{0} has chosen to impersonate {1}.</value>
  </data>
  <data name="RecordsNone.Text" xml:space="preserve">
    <value>No matches were found for your query. </value>
  </data>
  <data name="RecordsSome.Text" xml:space="preserve">
    <value>Matches were found for your query. </value>
  </data>
  <data name="ResetPassword.Text" xml:space="preserve">
    <value>Allows authorized user accounts to reset the password for one or many user accounts on the DNN instance.</value>
  </data>
  <data name="ResetPasswordFlagsInvalid.Text" xml:space="preserve">
    <value>The scope can only be 'all' or 'current'. If you want to use the other parameters, please choose only one to use at a time (e.g., UserID, RoleID, PortalID). </value>
  </data>
  <data name="ResetPasswordSuccess.Text" xml:space="preserve">
    <value>Your request to reset the password for the specified user accounts was successful. Each user account will be prompted to change their password the next time they log in. </value>
  </data>
  <data name="ScopeAll.Text" xml:space="preserve">
    <value>all sites</value>
  </data>
  <data name="ScopeCurrent.Text" xml:space="preserve">
    <value>the current site only</value>
  </data>
  <data name="StateOff.Text" xml:space="preserve">
    <value>OFF</value>
  </data>
  <data name="StateOn.Text" xml:space="preserve">
    <value>ON</value>
  </data>
  <data name="TempFolderFilesDeleteSuccess.Text" xml:space="preserve">
    <value>The files and folders in the installation temporary folder have been deleted. </value>
  </data>
  <data name="TestUserAccountsAdded.Text" xml:space="preserve">
    <value>Successfully added test user accounts with password: {0}... We saved some time together. Yay!  :)</value>
  </data>
  <data name="TestUsers.Text" xml:space="preserve">
    <value>Helps you develop or create demos by automatically adding a bunch of fun user accounts to play with. You can add the --howmany parameter to define how many users you want to create, otherwise 100 will be created by default.</value>
  </data>
  <data name="TestUsersDeleted.Text" xml:space="preserve">
    <value>Successfully deleted test user accounts... We saved some time together. Yay!  :)</value>
  </data>
  <data name="Welcome.Text" xml:space="preserve">
    <value>Thank you for using Upendo Prompt. There is no reason to place this module on a page at this time, but it may be necessary in the future.</value>
  </data>
</root>